"""
Simple XSS Vulnerability Detector
"""

import requests  
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
import sys

COMMON_XSS_PAYLOADS = [
    "<script>alert('XSS')</script>",
    "\"'><script>alert('XSS')</script>",
    "<img src=x onerror=alert('XSS')>",
    "'\"><svg/onload=alert('XSS')>",
    "<body onload=alert('XSS')>",
    "<iframe src='javascript:alert(1)'></iframe>",
    "<math><mi xlink:href=\"javascript:alert('XSS')\">",
]

def detect_xss_in_text(text, payload):
    return payload in text

def test_get(url):
    print("\n[*] Testing GET parameters for XSS injection...\n")

    parsed = urlparse(url)
    query_params = parse_qs(parsed.query)

    if not query_params:
        print("[ERROR] No parameters found in URL to test.")
        return

    vulnerable_params = []

    for param in query_params:
        original_values = query_params[param]
        print(f"Testing parameter: {param}")

        found_vuln = False
        for payload in COMMON_XSS_PAYLOADS:
            test_values = [v + payload for v in original_values]
            test_query = query_params.copy()
            test_query[param] = test_values

            injected_query = urlencode(test_query, doseq=True)
            injected_url = urlunparse((parsed.scheme, parsed.netloc, parsed.path, parsed.params, injected_query, parsed.fragment))

            try:
                response = requests.get(injected_url, timeout=10)
                if detect_xss_in_text(response.text, payload):
                    print(f"  [!] Potential XSS vulnerability detected for parameter '{param}' with payload:\n      {payload}\n")
                    vulnerable_params.append((param, payload, injected_url))
                    found_vuln = True
                    break
            except requests.RequestException as e:
                print(f"[ERROR] Request failed: {e}")
                return

        if not found_vuln:
            print(f"  [-] No XSS detected on parameter: {param}\n")

    if vulnerable_params:
        print("Summary of potential vulnerabilities found:")
        for vp in vulnerable_params:
            print(f" Parameter: {vp[0]}\n Payload: {vp[1]}\n URL: {vp[2]}\n")
    else:
        print("No XSS vulnerabilities detected with tested payloads.")

def test_post(url):
    print("\n[*] Testing POST parameters for XSS injection...\n")

    post_params = {}
    print("Enter POST parameters (key=value), one per line. Enter blank line to finish:")
    while True:
        try:
            line = input()
            if not line.strip():
                break
            if '=' not in line:
                print("[WARN] Invalid input format, expected key=value.")
                continue
            key, value = line.split('=', 1)
            post_params[key.strip()] = value.strip()
        except EOFError:
            break

    if not post_params:
        print("[ERROR] No POST parameters provided.")
        return

    vulnerable_params = []

    for param in post_params:
        original_value = post_params[param]
        print(f"Testing parameter: {param}")
        found_vuln = False

        for payload in COMMON_XSS_PAYLOADS:
            test_data = post_params.copy()
            test_data[param] = original_value + payload

            try:
                response = requests.post(url, data=test_data, timeout=10)
                if detect_xss_in_text(response.text, payload):
                    print(f"  [!] Potential XSS vulnerability detected for parameter '{param}' with payload:\n      {payload}\n")
                    vulnerable_params.append((param, payload))
                    found_vuln = True
                    break
            except requests.RequestException as e:
                print(f"[ERROR] Request failed: {e}")
                return

        if not found_vuln:
            print(f"  [-] No XSS detected on parameter: {param}\n")

    if vulnerable_params:
        print("Summary of potential vulnerabilities found:")
        for vp in vulnerable_params:
            print(f" Parameter: {vp[0]}\n Payload: {vp[1]}\n")
    else:
        print("No XSS vulnerabilities detected with tested payloads.")

def main():
    print("\n=== Simple XSS Vulnerability Detector ===\n")
    target_url = input("Enter target URL (include parameters for GET testing): ").strip()

    if not target_url.lower().startswith(("http://", "https://")):
        print("[ERROR] Please enter a valid URL starting with http:// or https://")
        sys.exit(1)

    method = input("HTTP method to test (GET or POST): ").strip().upper()
    if method not in ("GET", "POST"):
        print("[ERROR] Unsupported HTTP method. Choose GET or POST.")
        sys.exit(1)

    if method == "GET":
        test_get(target_url)
    else:
        test_post(target_url)

    print("\n=== Test completed ===\n")

if __name__ == "__main__":
    main()
